# Silver prices model
import numpy
import matplotlib.pyplot as plt
from pandas import read_csv
import math
from sklearn.preprocessing import MinMaxScaler
from sklearn.metrics import mean_squared_error
from keras.models import Sequential
from keras.layers import Dense
from keras.layers import LSTM
from keras.layers import Dropout
from keras.models import model_from_json

# convert an array of values into a dataset matrix
def create_dataset(dataset, look_back=1):
	dataX, dataY = [], []
	for i in range(len(dataset)-look_back-1):
		a = dataset[i:(i+look_back), 0]
		dataX.append(a)
		dataY.append(dataset[i + look_back, 0])
	return numpy.array(dataX), numpy.array(dataY)

# load the dataset
dataframe = read_csv('LBMA-SILVER.csv',usecols=[2])
Silver_Prices = dataframe.values
dataset = dataframe.values
dataset = dataset.astype('float32')
# normalize the dataset
scaler = MinMaxScaler(feature_range=(0, 1))
dataset = scaler.fit_transform(dataset)

# reshape into X=t and Y=t+1
look_back = 10  
trainX, trainY = create_dataset(dataset, look_back)

# reshape input to be [samples, time steps, features]
trainX = numpy.reshape(trainX, (trainX.shape[0], 1, trainX.shape[1]))

# create and fit the LSTM network
model = Sequential()
model.add(LSTM(1000, return_sequences = True, input_shape=(1, look_back),stateful=False))
model.add(Dropout(0.2))

# Adding a second LSTM layer and some Dropout regularisation
model.add(LSTM(units = 900, return_sequences = True))
model.add(Dropout(0.2))

# Adding a third LSTM layer and some Dropout regularisation
model.add(LSTM(units = 850, return_sequences = True))
model.add(Dropout(0.2))

# Adding a fourth LSTM layer and some Dropout regularisation
model.add(LSTM(units = 900))
model.add(Dropout(0.1))

model.add(Dense(1))
model.compile(loss='mean_squared_error', optimizer='adam')
model.fit(trainX, trainY, epochs=200, batch_size=10, verbose=1)

# Saving Model 
'''
# serialize model to JSON
model_json_10_batchsize = model.to_json()
with open("model_json_10_batchsize", "w") as json_file:
    json_file.write(model_json_10_batchsize)
# serialize weights to HDF5
model.save_weights("model.h5")
print("Saved model to disk")
'''

# make predictions
trainPredict = model.predict(trainX)

# invert predictions
trainPredict = scaler.inverse_transform(trainPredict)

# shift train predictions for plotting
trainPredictPlot = numpy.empty_like(dataset)
trainPredictPlot[:, :] = numpy.nan
trainPredictPlot[look_back:len(trainPredict)+look_back, :] = trainPredict
# calculate root mean squared error
trainScore = math.sqrt(mean_squared_error(Silver_Prices[look_back +1:], trainPredict[:,0]))
print('Train Score: %.2f RMSE' % (trainScore))

# plot baseline and predictions
plt.plot(scaler.inverse_transform(dataset),c = 'Blue', label = 'Silver Prices')
plt.plot(trainPredictPlot,c = 'orange', label = 'Train Predictions')
plt.plot(trainScore)
plt.grid()
plt.xlabel('Datat points in time')
plt.ylabel('Prices')
plt.legend()
plt.axis('tight')
plt.autoscale(enable=True, axis='x', tight=True)
plt.show()
print(model.summary())


# Getting the predicted stock price of with selected horizon
Training_window = look_back
import pandas as pd
import numpy as np
dataset_test = pd.read_csv('silver_train.csv')
dataset_train = pd.read_csv('LBMA-SILVER.csv')
real_stock_price = dataset_test.iloc[:, 2:3].values
dataset_total = pd.concat((dataset_train['GBP'], dataset_test['GBP']), axis = 0)
inputs = dataset_total[len(dataset_total) - len(dataset_test) - Training_window:].values
inputs = inputs.reshape(-1,1)
inputs = scaler.transform(inputs)
Horizion = 240
Horizon_input = Horizion + Training_window
X_test = []
for i in range(Training_window, Horizon_input):
    X_test.append(inputs[i-Training_window :i, 0])
X_test = np.array(X_test)
X_test = np.reshape(X_test, (X_test.shape[0],1, X_test.shape[1]))
predicted_stock_price = model.predict(X_test)
predicted_stock_price = scaler.inverse_transform(predicted_stock_price)
Actual_slice_horizon =real_stock_price[0:Horizion]
# Visualising the results
forecast_score = math.sqrt(mean_squared_error(Actual_slice_horizon, predicted_stock_price[:,0]))
print('Forecast Score: %.2f RMSE' % (forecast_score))
plt.plot(Actual_slice_horizon, color = 'Blue', label = 'Real  Price')
plt.plot(predicted_stock_price, color = 'red', label = 'Forecasted Price')
plt.title('Stock Price one_year forecast')
plt.xlabel('Time')
plt.ylabel(' Stock Price')
plt.legend()
plt.axis('tight')
plt.autoscale(enable=True, axis='x', tight=True)
plt.show()
